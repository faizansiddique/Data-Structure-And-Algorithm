- Data must be sorted!
- Chooses the element in the middle of the array and compare it against the search value
- If element is equal to the value, we're done
- If element is greater than the value, search the left half of the array
- If the element is less than the value, search the right half of the array

	-22	-15	1	7	20	35	55
	search value = 1
	start = 0
	end = 7
	midpoint = (start+end)/2 = 3
	array[3] = 7 - this is greater than 1, so we'll look at the left half of the array
	
	search value = 1
	start = 0
	end = midpoint = 3
	midpoint = (start+end)/2 = 1
	array[1] = -15 - this is less than 1, so we'll look at the right half of the array
	
	search value = 1
	start = midpoint + 1
	end = 3
	midpoint = (start+end)/2 = 2
	array[2] = 1 - we have found our value
	
- At some point, there will be only one element in the partition you're checking, but it does'nt have to get to that point
- can be implemented recursively
- O(log n) - keeps dividing the array in half